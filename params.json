{
  "name": "Rf-form",
  "tagline": "rf form: build react form with validations in a better way.",
  "body": "# RF Form\r\nbuild react form with validations in a better way.\r\n\r\n## Features\r\n- build React form with validations easily\r\n- schema based\r\n- support recursive structures\r\n- support circle schema definition\r\n- support connected forms\r\n- support manipulations of array of fields\r\n- support top level and individual controls of readOnly, disabled\r\n- enable validations of fields automatically\r\n- support extensions of form components (wrapper, group, array, fields)\r\n\r\n## Installation\r\n- install React via npm\r\n- install this package via npm: `npm install rf-form --save`\r\n- optionally install some [form components suit](https://github.com/ShakingMap/rf-form#components-suits-list)\r\n\r\n## Basic Usage\r\nYou can have a look at the [test file](https://github.com/ShakingMap/rf-form/blob/master/test/entry.js).\r\n\r\nFirst, import *Form* and any *Form Components Suit* you choose.\r\n\r\n    import Form from 'rf-form';\r\n    import * as buildOptions from 'rf-bootstrap3';\r\n\r\nThen, you can optionally set the *Form Components Suit* as default props of the *Form*, or you can pass it as a prop when you render the form.\r\n\r\n    Form.defaultProps.buildOptions = buildOptions;\r\n\r\nThen, define your [schema](https://github.com/ShakingMap/rf-form#field-schema).\r\n\r\n    const schema = {\r\n        name: {\r\n            type: 'Text',\r\n            label: 'Name',\r\n            validate(v) {\r\n                if (!v) return 'Name is required.'\r\n            }\r\n        },\r\n        birthday: {\r\n            type: 'Date',\r\n            label: 'Birthday'\r\n        },\r\n        sex: {\r\n            type: 'RadioGroup',\r\n            label: 'Sex',\r\n            options: {\r\n                items: {\r\n                    male: 'Male',\r\n                    female: 'Female',\r\n                    unknown: {label: 'Unknown', disabled: true}\r\n                }\r\n            },\r\n            validate(v) {\r\n                if (!v) return 'Sex is required.'\r\n            }\r\n        },\r\n        friends: {\r\n            label: 'Friends',\r\n            array: {\r\n                type: 'Text',\r\n                label: 'Friend Name'\r\n            },\r\n            validate(v) {\r\n                if (v.length > 3) return 'You have too much friends.'\r\n            }\r\n        },\r\n        account: {\r\n            label: 'Account',\r\n            group: {\r\n                username: {\r\n                    type: 'Text',\r\n                    label: 'Username',\r\n                    validate(v) {if (!v) return 'Username is required.'}\r\n                },\r\n                password: {\r\n                    type: 'Password',\r\n                    label: 'Password',\r\n                    validate(v) {if (!v || v.length < 6) return 'Password length must be >= 6.'}\r\n                },\r\n                confirmPassword: {\r\n                    type: 'Password',\r\n                    label: 'Confirm Password',\r\n                    validate(v, fv /*form value*/) {\r\n                        if (v !== fv.account.password) return 'Password does not match.'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\nFinally, render the form\r\n\r\n    class TestPage extends React.Component {\r\n        render() {\r\n            return <Form {...{\r\n                schema: schema,\r\n                onSubmit: (value, summary, detail)=> console.log({value, summary, detail})\r\n    \r\n                // you can specify value and onChange props to make the form work in controlled mode.\r\n                // value: ...\r\n                // onChange: (value, summary, detail)=> ...\r\n            }}>\r\n                <button className=\"btn btn-primary\">Submit</button>\r\n            </Form>\r\n        }\r\n    }\r\n\r\n## APIs\r\n\r\nIf you are not interested in creating form component, you can only have a look at the apis of *Form*.\r\n\r\n### Common Concepts\r\n- validation state - one of 'success', 'warning', 'error' or falsy\r\n\r\n### Form\r\n#### Props\r\n- schema - the *group field* of a [field schema](https://github.com/ShakingMap/rf-form#field-schema) \r\n- buildOptions - an object as {Wrapper, Group, Array, fields}, being used to build the form, often provided by some *form components suit package*.\r\n- value - if undefined, the form will be uncontrolled.\r\n- onChange - func(value, summary, details), summary is {success: count, warning: count, error: count}, details are all validation results.\r\n- onSubmit - func(value, summary, details), summary is {success: count, warning: count, error: count}, details are all validation results.\r\n- subForms - func(), return a group of sub forms in an object, such as {form1: this.refs.form1, form2: this.refs.form2, ...}.\r\n- readOnly - bool\r\n- disabled - bool\r\n- enableValidation - bool or 'auto', default to 'auto', which will enable validation of a field if the onChange of the field is triggered\r\n- type - string, default to 'form'\r\n\r\n### Wrapper\r\nA Wrapper is a form component which is responsible for rendering label, field component and validation message.\r\n#### Props\r\n- id - field id, usually used as *htmlFor* prop of label\r\n- label - optional string\r\n- validationState - see *validation state* of common concepts\r\n- validationMessage - string\r\n- children - field\r\n\r\n### Group\r\nA Group is a form component which is responsible for organizing a group of fields\r\n#### Props\r\n- children - field\r\n- validationState - see *validation state* of common concepts\r\n- readOnly - usually no effect\r\n- disabled - usually no effect\r\n\r\n### Array\r\nAn Array is a form component which is responsible for organizing an array of same fields\r\n#### Props\r\n- children - field\r\n- validationState - see *validation state* of common concepts\r\n- readOnly - usually no effect\r\n- disabled - the array manipulation operations should be disabled\r\n- onInsert - func(index)\r\n- onRemove - func(index)\r\n- onMove - func(from, to)\r\n\r\n### Field\r\nA field is a form component which is responsible for managing the this field\r\n#### Props\r\n- id - field id, usually used as *id* props of inner input\r\n- validationState - see *validation state* of common concepts\r\n- value - any value this field needs. \r\n- onChange - func(value, event)\r\n- readOnly - bool, usually implemented by text field\r\n- disabled - bool, field should be disabled\r\n- ... - field component can define other props it needs, passed in from the corresponding schema.options\r\n\r\n#### Methods\r\n- cleanValue - func(value, options): compatibleValue. return a value that is compatible with this field.\r\n\r\n## Field Schema\r\nA field schema is an object of following keys:\r\n\r\n- type - string or field component. if string, it will be mapped into a field component by form.props.buildOptions.fields. if this schema has array or group key, type key can be omitted\r\n- wrapper - optional string or wrapper component. if string, it will be mapped into a wrapper component by form.props.buildOptions.fields\r\n- label - optional string\r\n- options - will be spread to the props of corresponding form component\r\n- validate - optional func(value, formValue): result. standard result format is {state: validationState, message: validationMessage}. if result is not standard, it will be converted as below:\r\n    - falsy -> {state: 'success', message: ''}\r\n    - string -> {state: 'error', message: string}\r\n    - array -> {state: array[0], message: array[1]}\r\n- array - optional *field schema*. if exists, this schema indicates an array field.\r\n- group - optional object as {key: *field schema*}. if exists, this schema indicates a group field.\r\n- ignoreValue - optional bool. only available for field in a group. if true, the value of this field won't be included in the form value and form validation on submit\r\n\r\n## Components Suits List\r\n- [rf-bootstrap3](https://github.com/ShakingMap/rf-bootstrap3) - form components suit for bootstrap3\r\n- [rf-materialize](https://github.com/ShakingMap/rf-materialize) - form components suit for materialize\r\n\r\n## Q&A\r\n### How to connect forms?\r\nFor example\r\n\r\n    <Form {...{\r\n        subForms: ()=> {\r\n            return {\r\n                form1: this.refs.form1,\r\n                form2: this.refs.form2\r\n            }\r\n        },\r\n        onSubmit: (value, summary, detail)=> console.log({value, summary, detail})\r\n    }}>\r\n        <Form {...{\r\n            type: 'div',\r\n            ref: 'form1',\r\n            ...\r\n        }}/>\r\n        <Form {...{\r\n            type: 'div',\r\n            ref: 'form2',\r\n            ...\r\n        }}/>\r\n        <button className=\"btn btn-primary\">Submit</button>\r\n    </Form>\r\n\r\nYou can separate your form into many sub forms and layout them in this way.\r\n\r\n## License\r\nISC\r\n\r\n## Let's Build It Together!\r\nIf you like this project, welcome to give any helps and supports! Thanks!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}